# -*- coding: utf-8 -*-
"""Predictive Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Sra2gO6kmGtRqTm1FqvidO1hi_zdVJoe

#Data Loading
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

heart_data = pd.read_csv("/content/Medicaldataset.csv")

heart_data

"""Pada proses ini data yang sudah ada, dipanggil untuk digunakan dalam proses analisis

# Exploratory Data Analysis
Pada tahap ini dilakukan eksplorasi pada data yang memiliki tujuan untuk mendapatkan pengetahuan atau insight dari data yang ada

Deskripsi Variabel
"""

heart_data.info()

"""- Terdapat 1 kolom yang tipe datanya object, yaitu Result, kolom ini yang akan menjadi target klasifikasi
- Terdapat 3 kolom yang tipe datanya float64 yaitu Blood sugar, CK-MB, Troponin
- Terdapat 5 kolom yang tipe datanya int64, yaitu Age, Gender, Heart rate, Systolic blood pressure, Diastolic blood pressure
"""

heart_data.duplicated().sum()

heart_data.isnull().sum()

"""Dataset tidak memiliki nila NaN dan tidak terdapat data yang sama atau duplikat"""

heart_data.describe()

"""Dari kode diatas diketahui
- Terdapat 1319 data yang siap digunakan
- Usia pasien yang menjadi subjek dari data secara rata-rata diisi oleh mereka yang berusia 56 tahun
"""

numerical_features = ['Age', 'Heart rate', 'Systolic blood pressure', 'Diastolic blood pressure', 'Blood sugar', 'CK-MB', 'Troponin']
categorical_features = ['Gender', 'Result']

#Fitur Kategori
feature = categorical_features[0]
count = heart_data[feature].value_counts()
percent = 100*heart_data[feature].value_counts(normalize=True)
df = pd.DataFrame({'jumlah sampel':count, 'persentase':percent.round(1)})
print(df)
count.plot(kind='bar', title=feature);

"""Berdasarkan dari visualisasi variabel gender dapat kita simpulkan bahwa 1 (laki-laki) lebih mendominasi daripada 0 (perempuan)"""

#Fitur Kategori
feature = categorical_features[1]
count = heart_data[feature].value_counts()
percent = 100*heart_data[feature].value_counts(normalize=True)
df = pd.DataFrame({'jumlah sampel':count, 'persentase':percent.round(1)})
print(df)
count.plot(kind='bar', title=feature);

"""Berdasarkan visualisasi dari variable atau kolom result diketahui positive lebih mendominasi daripada negative, yang artinya pasien yang ada di dalam data banyak yang mengalami serangan jantung (positive) daripada yang tidak (negative)"""

#Fitur Numerik
heart_data[numerical_features].hist(bins=50, figsize=(20,15))
plt.show()

n_cols = 3
n_features = len(numerical_features)
n_rows = 3

# Create subplots
fig, axes = plt.subplots(n_rows, n_cols, figsize=(20, 15))
axes = axes.flatten()  # Flatten in case of 2D array

# Loop through each numerical feature and plot it
for idx, feature in enumerate(numerical_features):
    sns.boxplot(x=heart_data[feature], ax=axes[idx], color='skyblue')
    axes[idx].set_title(f'Box Plot of {feature}')
    axes[idx].set_xlabel(feature)
    axes[idx].grid(True, axis='x', linestyle='--', alpha=0.5)

# Hide unused subplots if any
for i in range(n_features, len(axes)):
    axes[i].axis('off')

plt.tight_layout()
plt.show()

"""Distribusi data numerik
1. Age

Pasien yang berada dalam data memiliki kisaran umur 20 sampai 100, Age memiliki distribusi normal
2. Heart rate

Detak jantung berkisar pada 0 - 200, dan rata - rata berkisar pada 150, memiliki distribusi miring ke kanan (right skewed)
3. Systolic Blood Pressure

Tekanan darah yang berada di arteri ketika jantung berdetak dengan kebanyakan pasien memiliki tekanan berkisar 100 - 150, memiliki distribusi normal
4. Diastolic blood pressure

Tekanan darah dari arteri ketika jantung berhenti sbentar sebelum berdetak kembali, dengan kebanyakan pasien memiliki tekanan berkisar 60 - 80, memiliki distribusi yang miring ke kanan (right skewed)
5. Blood sugar

Gula darah pasien kebanyakan berada pada kisar 100, memiliki distribusi miring ke kanan (right skewed)
6. CK-MB

Ceratine kinase myocardial band yang dimiliki pasien kebanyakan berkisar pada 0 - 20, atau dibawah 25, memiliki distribusi miring ke kanan (right skewed)
7. Troponin

Troponin yang dimiliki pasien kebanyakan hampir bernilai 0, memiliki distribusi miring ke kanan (right skewed)

**Insight**

Data tersebut rata rata memiliki distribusi non normal, dimana kebanyakan kolom atau variabel memiliki disribusi yang miring ke kanan, juga kolom atau variabel "Result" di dominasi oleh positive

# Data Preparation

Pada bagian ini akan dilakukan Encoding variabel atau kolom kategori, dan pembagian data menjadi train dan test, menggunakan fungsi train_test_split

**Encoding menggunakan LabelEncoder**
"""

from sklearn.preprocessing import LabelEncoder
label_encoder = LabelEncoder()

# Encode kolom kategorikal
heart_data["Result"] = label_encoder.fit_transform(heart_data["Result"])
heart_data

"""**Dataset split menggunakan train_test_split**"""

from sklearn.model_selection import train_test_split

X = heart_data.drop(["Result"],axis =1)
y = heart_data["Result"]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.1, random_state = 123)

print(f'Total subjek dari seluruh dataset: {len(X)}')
print(f'Total subjek dari dataset train: {len(X_train)}')
print(f'Total subjek dari dataset test: {len(X_test)}')

"""# Model Development"""

from sklearn.neighbors import KNeighborsClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.svm import SVC

"""Pada pembuatan model ini terdapat beberapa paramater yang digunakan, diantaranya adalah
- KNN menggunakan paramater n_neighbors=3, weights='distance', algorithm='auto', p=2, metric='minkowski'
- Random Forest menggunakan paramater n_estimators=150, max_depth=5, min_samples_split=4, min_samples_leaf=2, max_features='sqrt', bootstrap=True, criterion='gini', random_state=42
- Decision Tree menggunkana paramater criterion='entropy',splitter='best', max_depth=4, min_samples_split=4, min_samples_leaf=2, max_features=None, random_state=42
- SVM menggunkan paramater C=0.5, kernel='rbf', degree=3, gamma='scale', probability=True, random_state=42
"""

knn = KNeighborsClassifier(
    n_neighbors=3,
    weights='distance',
    algorithm='auto',
    p=2,
    metric='minkowski'
)

rf = RandomForestClassifier(
    n_estimators=150,
    max_depth=5,
    min_samples_split=4,
    min_samples_leaf=2,
    max_features='sqrt',
    bootstrap=True,
    criterion='gini',
    random_state=42
)

dt = DecisionTreeClassifier(
    criterion='entropy',
    splitter='best',
    max_depth=4,
    min_samples_split=4,
    min_samples_leaf=2,
    max_features=None,
    random_state=42
)

svm = SVC(
    C=0.5,
    kernel='rbf',
    degree=3,
    gamma='scale',
    probability=True,
    random_state=42
)

knn.fit(X_train, y_train)
dt.fit(X_train, y_train)
rf.fit(X_train, y_train)
svm.fit(X_train, y_train)

print("Model training selesai.")

"""# Evaluation

Model akan di evaluasi menggunakan metrik akurasi, presisi, recall dan F1-Score
"""

from sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score, f1_score

def evaluate_model(model, X_test, y_test):
    y_pred = model.predict(X_test)
    cm = confusion_matrix(y_test, y_pred)
    tn, fp, fn, tp = cm.ravel()
    results = {
        'Accuracy': accuracy_score(y_test, y_pred),
        'Precision': precision_score(y_test, y_pred),
        'Recall': recall_score(y_test, y_pred),
        'F1-Score': f1_score(y_test, y_pred)
    }
    return results
# Mengevaluasi setiap model dan mengumpulkan hasilnya
results = {
    'K-Nearest Neighbors (KNN)': evaluate_model(knn, X_test, y_test), # Menggunakan KNeighborsClassifier (nn)
    'Random Forest (RF)': evaluate_model(rf, X_test, y_test),       # Menggunakan RandomForestClassifier (rf)
    'Support Vector Machine (SVM)': evaluate_model(svm, X_test, y_test), # Menggunakan SVM (svm)
    'Decision Tree (DT)': evaluate_model(dt, X_test, y_test),       # Menggunakan DecisionTreeClassifier (dt)
}

# Buat DataFrame untuk meringkas hasil
summary_df = pd.DataFrame(columns=['Model', 'Accuracy', 'Precision', 'Recall', 'F1-Score'])

# Isi DataFrame dengan hasil
rows = []
for model_name, metrics in results.items():
    rows.append({
        'Model': model_name,
        'Accuracy': metrics['Accuracy'],
        'Precision': metrics['Precision'],
        'Recall': metrics['Recall'],
        'F1-Score': metrics['F1-Score']
    })

# Konversi daftar kamus ke DataFrame
summary_df = pd.DataFrame(rows)

# Tampilkan DataFrame
print(summary_df)